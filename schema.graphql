type Account @entity {
  id: ID!
  rmrkNfts: [RmrkNFT!] @derivedFrom(field: "currentOwner")
  rmrkEvents: [RmrkEvent!] @derivedFrom(field: "caller")
}

type RmrkNFT @entity {
  symbol: String
  transferable: Int
  collection: String!
  issuer: String
  sn: String
  id: ID!
  currentOwner: Account
  price: BigInt! @index
  burned: Boolean! @index
  blockNumber: Int!
  events: [RmrkEvent!] @derivedFrom(field: "nft")
  createdAt: DateTime!
  updatedAt: DateTime!
  metadata: String
  parent: RmrkNFT
  children: [RmrkNFT!] @derivedFrom(field: "parent")
}

type RmrkStats @entity{
  id: ID!
  floor: BigInt
  floorNft: String
  volume: BigInt!
  topSale: BigInt!
}


type RmrkEvent @entity {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  caller: Account!
  info: BigInt # If list or buy
  interaction: RmrkInteraction!
  nft: RmrkNFT # if nft interaction
}

enum RmrkInteraction {
  MINT
  LIST
  BUY
  SEND
  BURN
}

